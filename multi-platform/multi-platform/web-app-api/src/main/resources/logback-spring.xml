<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <define name="HostName"
            class="pro.skywalking.logback.LogbackCustomHostName"/>
    <!-- 颜色配置 -->
    <conversionRule conversionWord="logbackColorConfiguration" converterClass="pro.skywalking.logback.LogbackColorConfiguration" />
    <!--日志的位置-->
    <property name="log.path" value="${LOG_DIR}/logs"/>
    <!--主包名-->
    <property name="main.package" value="cn.common"/>
    <!--skywalking包名-->
    <property name="pro.package" value="pro.skywalking"/>
    <!--日志格式logger{56}代表长度-->
    <property name="log.pattern" value="%logbackColorConfiguration(%d{yyyy-MM-dd HH:mm:ss.SSS} ${HostName} [%thread] %-5level %logger{56} - %d %p (%file:%line\)- %m%n)"/>
    <!--<include resource="org/springframework/boot/logging/logback/base.xml" />-->
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml" />-->
    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%logbackColorConfiguration(%d{yyyy-MM-dd HH:mm:ss.SSS} ${HostName} [%thread] %-5level %logger{56} - %d %p (%file:%line\)- %m%n)</pattern>
            <!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是log.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="APPS_LOG"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.path}.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 后台系统API文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/log.2018-01-04.0.log -->
            <fileNamePattern>${log.path}.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为5天 -->
            <maxHistory>5</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是后台系统API文件的大小，默认值是10MB,设置为20480KB-->
                <maxFileSize>20480KB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>
                ${log.pattern}
            </pattern>
            <!-- 记录日志的编码 -->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>
    <!-- 控制台输出日志级别 -->
    <root level="INFO">
        <!--<appender-ref ref="APPS_LOG" />-->
        <appender-ref ref="STDOUT" />
    </root>
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- ${main.package}为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="${main.package}" level="INFO">
        <appender-ref ref="APPS_LOG" />
    </logger>
    <logger name="${pro.package}" level="INFO">
        <appender-ref ref="APPS_LOG" />
    </logger>
    <!-- 下面配置一些第三方包的日志过滤级别，用于避免刷屏 -->

    <!--默认情况下子Logger会继承root的Logger的appender，也就是说子Logger会在root的Logger的appender里输出。-->
    <logger name="com.alibaba.druid" additivity="true" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.hibernate" additivity="true" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.springframework.jdbc" additivity="true" level="DEBUG" >
        <level value="DEBUG" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.springframework.web" additivity="true" level="DEBUG" >
        <level value="DEBUG" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.springframework" additivity="true" level="DEBUG" >
        <level value="DEBUG" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="com.opensymphony" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.apache" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>

    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.hibernate.type.descriptor.sql.BasicExtractor" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.hibernate.SQL" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.hibernate.engine.QueryParameters" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>
    <logger name="org.hibernate.engine.query.HQLQueryPlan" additivity="true" level="INFO" >
        <level value="INFO" />
        <appender-ref ref="APPS_LOG" />
        <appender-ref ref="STDOUT" />
    </logger>

    <logger name="org.eclipse.jetty" level="INFO"/>
    <logger name="org.jboss.netty" level="INFO"/>
</configuration>
